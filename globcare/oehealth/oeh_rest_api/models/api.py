# -*- coding: utf-8 -*-
##############################################################################
#    Copyright (C) 2015 - Present, oeHealth (<https://www.oehealth.in>). All Rights Reserved
#    oeHealth, Hospital Management Solutions

# Odoo Proprietary License v1.0
#
# This software and associated files (the "Software") may only be used (executed,
# modified, executed after modifications) if you have purchased a valid license
# from the authors, typically via Odoo Apps, oeHealth.in, braincrewapps.com or if you have received a written
# agreement from the authors of the Software.
#
# You may develop Odoo modules that use the Software as a library (typically
# by depending on it, importing it and using its resources), but without copying
# any source code or material from the Software. You may distribute those
# modules under the license of your choice, provided that this license is
# compatible with the terms of the Odoo Proprietary License (For example:
# LGPL, MIT, or proprietary licenses similar to this one).
#
# It is forbidden to publish, distribute, sublicense, or sell copies of the Software
# or modified copies of the Software.
#
# The above copyright notice and this permission notice must be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
# IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
# DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
# ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
# DEALINGS IN THE SOFTWARE.

##############################################################################
import os
import hashlib
import logging
from odoo import models, fields, api, tools, _
from datetime import datetime, timedelta
from odoo.exceptions import UserError
from odoo.tools import DEFAULT_SERVER_DATETIME_FORMAT

api_expires_in_minutes = 'oehealth.oehealth_rest_api_token_expires_in'
fcm_project_api_key = 'oehealth.fcm_project_api_key'
patient_notification_message_ref = 'oehealth.patient_notification_message'
physician_notification_message_ref = 'oehealth.physician_notification_message'

_logger = logging.getLogger(__name__)

try:
    from pyfcm import FCMNotification
except ImportError:
    _logger.warning("Python library 'pyfcm' cannot be found. "
                    "Install it with the command 'pip install pyfcm' to support notification feature.")
    FCMNotification = None


class oeHealthRESTAPIToken(models.Model):
    _name = 'oeh.rest.api.token'
    _description = 'Rest API access token'
    _rec_name = 'Token'

    Token = fields.Char('Token', required=True, readonly=True, default='/', copy=False)
    UserId = fields.Many2one('res.users', string='Generated By', default=lambda self: self.env.uid, copy=False)
    ExpirationDate = fields.Datetime('Expires', copy=False)
    TokenGenerated = fields.Boolean(default=False, copy=False)

    @api.model
    def create(self, vals):
        count = self.search_count([])
        if count and int(count) > 0:
            raise UserError(_("You can not create more than 1 one API Token. "
                              "Please click on 'Regenerate Token' button if you want to refersh the token !"))
        return super(oeHealthRESTAPIToken, self).create(vals)

    def find_or_create_token(self, access_token=False, create=False, write=False):
        access_token_expired = False
        if not access_token:
            access_token = self.env['oeh.rest.api.token'].sudo().search([], order='id DESC', limit=1)
        if access_token:
            access_token = access_token[0]
            if access_token.ExpirationDate and access_token.has_token_expired():
                access_token_expired = True
        if not access_token_expired and create:
            # First unlink the existing the access token
            access_token.unlink()

            # Now create new access token
            expires = datetime.now() + timedelta(days=int(self.env.ref(api_expires_in_minutes).sudo().value))
            vals = {
                'ExpirationDate': expires.strftime(DEFAULT_SERVER_DATETIME_FORMAT),
                'Token': self.generate_random_token(),
                'TokenGenerated': True,
            }
            access_token = self.env['oeh.rest.api.token'].sudo().create(vals)
            self._cr.commit()
        elif access_token and not access_token_expired and write:
            expires = datetime.now() + timedelta(days=int(self.env.ref(api_expires_in_minutes).sudo().value))
            vals = {
                'ExpirationDate': expires.strftime(DEFAULT_SERVER_DATETIME_FORMAT),
                'Token': self.generate_random_token(),
                'TokenGenerated': True,
            }
            access_token.sudo().write(vals)
            self._cr.commit()
        elif access_token_expired:
            # Now create new access token
            expires = datetime.now() + timedelta(days=int(self.env.ref(api_expires_in_minutes).sudo().value))
            vals = {
                'ExpirationDate': expires.strftime(DEFAULT_SERVER_DATETIME_FORMAT),
                'Token': self.generate_random_token(),
                'TokenGenerated': True,
            }
            access_token.sudo().write(vals)
            self._cr.commit()

        if not access_token:
            return None
        return access_token.Token, fields.Datetime.from_string(access_token.ExpirationDate)

    def regenerate_token(self):
        for token in self:
            self.find_or_create_token(access_token=token, create=False, write=True)
        return True

    def generate_random_token(self, length=40):
        """
        Generate Random Token everytime when this method calls
        """
        rbytes = os.urandom(length)
        return '{}'.format(str(hashlib.sha1(rbytes).hexdigest()))

    def is_token_valid(self):
        """
        Checks if the access token is valid.

        :param scopes: An iterable containing the scopes to check or None
        """
        self.ensure_one()
        return not self.has_token_expired()

    def has_token_expired(self):
        self.ensure_one()
        return datetime.now() > fields.Datetime.from_string(self.ExpirationDate)


class oeHealthAppointmentReminders(models.Model):
    _name = 'oeh.medical.appointment.notifications'
    _description = 'oeHealth - Appointment Reminders'

    name = fields.Integer(string='Appointment ID')
    reminder_notification_sent = fields.Boolean(default=False)
    reminder_notification_date = fields.Datetime(string='Reminder Notification Date & Time')


class oeHealthNotifications(models.Model):
    _name = 'oeh.medical.notifications'
    _description = 'oeHealth - Push Notifications'
    _rec_name = 'device_registration_token'

    DEVICE_TYPE = [
        ("0", 'N/A'),
        ("1", 'iOS'),
        ("2", 'Android'),
    ]

    patient_id = fields.Integer(string='Patient ID')
    physician_id = fields.Integer(string='Physician ID')
    device_registration_token = fields.Char(string='Device Registration Token')
    device_type = fields.Selection(DEVICE_TYPE, string='Device Type')
    notification_setting = fields.Boolean(string='Notification On?', default=True)

    @api.model
    def send_appointment_reminders(self):
        # Checking if FCM python library is properly installed
        if FCMNotification is not None:
            # Get configured Firebase Cloud Messaging (FCM) key, patient and doctor notification messages
            fcm_project_key = self.env.ref(fcm_project_api_key).sudo().value
            patient_notification_message = self.env.ref(patient_notification_message_ref).sudo().value
            physician_notification_message = self.env.ref(physician_notification_message_ref).sudo().value
            if fcm_project_key != '':

                appointment_reminder_obj = self.env['oeh.medical.appointment.notifications']
                push_service = FCMNotification(api_key=fcm_project_key)     # Assigning FCM key to FCM library

                DATETIME_FORMAT = "%Y-%m-%d %H:%M:%S"
                current_date = datetime.now()
                next_hour_time = current_date + timedelta(minutes=60)

                model_name = 'oeh.medical.appointment'

                model = self.env['ir.model'].sudo().search([('model', '=', model_name)], limit=1)

                if model:
                    # Search for available appointments
                    appointments = self.env[model_name].sudo().search([
                        ('appointment_date', '<=', next_hour_time), ('appointment_date', '>=', current_date), ('state', '=', 'Scheduled')])

                    if appointments:
                        for appointment in appointments:
                            message_sent = False
                            patient_meeting_time = ''
                            physician_meeting_time = ''

                            # Find appointment time different for patient and doctor
                            if appointment.patient.oeh_patient_user_id:
                                patient_difference = appointment.appointment_date_only - current_date
                                patient_meeting_time = str(int(patient_difference.seconds / 60))

                            if appointment.doctor.oeh_user_id:
                                physician_difference = appointment.appointment_date_only - current_date
                                physician_meeting_time = str(int(physician_difference.seconds / 60))


                            # Find if the notification already sent to the appointment or not
                            find_appointment = appointment_reminder_obj.sudo().search([('name', '=' , int(appointment.id))], limit=1)
                            if not find_appointment:
                                appointment_reminder_id = appointment_reminder_obj.sudo().create({
                                    'name': int(appointment.id),
                                    'reminder_notification_sent': False,
                                })
                            else:
                                appointment_reminder_id = find_appointment

                            # Find Device Registration Token for the Receiver (patient or physician)
                            patient_device_registration_token = ''
                            patient_notification_status = True
                            find_patient = self.sudo().search([('patient_id', '=', int(appointment.patient.id))], limit=1)
                            if find_patient:
                                patient_device_registration_token = find_patient.device_registration_token
                                patient_notification_status = find_patient.notification_setting

                            physician_device_registration_token = ''
                            physician_notification_status = True
                            find_physician = self.sudo().search([('physician_id', '=', int(appointment.doctor.id))], limit=1)
                            if find_physician:
                                physician_device_registration_token = find_physician.device_registration_token
                                physician_notification_status = find_physician.notification_setting

                            if not appointment_reminder_id.reminder_notification_sent:
                                # Send Notification message to Patient
                                if patient_notification_message != '':
                                    message = patient_notification_message
                                    message = message.replace('%physician%', appointment.doctor.name)
                                    message = message.replace('%minutes%', patient_meeting_time)
                                else:
                                    message = _('You have an appointment today with %s in %s') % \
                                              (str(appointment.doctor.name), patient_meeting_time)

                                if patient_device_registration_token != '' and patient_notification_status:
                                    registration_id = patient_device_registration_token
                                    message_title = "Appointment Reminder"
                                    message_body = message

                                    result = push_service.notify_single_device(registration_id=registration_id,
                                                                               message_title=message_title,
                                                                               message_body=message_body)

                                    if 'success' in result and result.get('success') == 1:
                                        message_sent = True
                                        logger_message = _(
                                            'Notification sent successfully to patient for the Appointment# %s') % (
                                                             str(appointment.name))
                                        _logger.info(logger_message)

                                # Send Notification message to Doctor
                                if physician_notification_message != '':
                                    message_physician = physician_notification_message
                                    message_physician = message_physician.replace('%patient%', appointment.patient.name)
                                    message_physician = message_physician.replace('%minutes%', physician_meeting_time)
                                else:
                                    message_physician = _('You have an appointment today with %s in %s') % \
                                              (str(appointment.patient.name), physician_meeting_time)

                                if physician_device_registration_token != '' and physician_notification_status:
                                    phy_registration_id = physician_device_registration_token
                                    message_physician_title = "Appointment Reminder"
                                    message_physician_body = message_physician

                                    result_physician = push_service.notify_single_device(registration_id=phy_registration_id,
                                                                               message_title=message_physician_title,
                                                                               message_body=message_physician_body)

                                    if 'success' in result_physician and result_physician.get('success')==1:
                                        message_sent = True
                                        logger_message = _(
                                            'Notification sent successfully to doctor for the Appointment# %s') % (
                                                             str(appointment.name))
                                        _logger.info(logger_message)

                                if message_sent:
                                    appointment_reminder_id.sudo().write(
                                        {'reminder_notification_sent': True, 'reminder_notification_date': datetime.now()})

                else:
                    error_message = "Oops! The model oeh.medical.appointment is not available in the registry. " \
                       "Please check if oeHealth module is properly installed on your server."
                    _logger.warning(error_message)

            else:
                _logger.warning('Firebase Cloud Messaging (FCM) Project API Key not found! '
                                'Please configure your API key in "fcm_project_api_key" variable by visiting '
                                'Settings > Technical > System Parameters screen.')
        else:
            _logger.warning("Python library 'pyfcm' cannot be found. "
                            "Install it with the command 'pip install pyfcm' to support notification feature.")

        return True